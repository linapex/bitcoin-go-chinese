
//<developer>
//    <name>linapex 曹一峰</name>
//    <email>linapex@163.com</email>
//    <wx>superexc</wx>
//    <qqgroup>128148617</qqgroup>
//    <url>https://jsq.ink</url>
//    <role>pku engineer</role>
//    <date>2019-03-16 20:02:51</date>
//</624461725135015936>

//版权所有（c）2014-2016 BTCSuite开发者
//此源代码的使用由ISC控制
//可以在许可文件中找到的许可证。

package chaincfg

import (
	"bytes"
	"testing"

	"github.com/davecgh/go-spew/spew"
)

//testgenesisblock通过以下方式测试主网络的genesis块的有效性：
//检查编码的字节和哈希。
func TestGenesisBlock(t *testing.T) {
//将Genesis块编码为原始字节。
	var buf bytes.Buffer
	err := MainNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestGenesisBlock: %v", err)
	}

//确保编码的块与预期的字节匹配。
	if !bytes.Equal(buf.Bytes(), genesisBlockBytes) {
		t.Fatalf("TestGenesisBlock: Genesis block does not appear valid - "+
			"got %v, want %v", spew.Sdump(buf.Bytes()),
			spew.Sdump(genesisBlockBytes))
	}

//Check hash of the block against expected hash.
	hash := MainNetParams.GenesisBlock.BlockHash()
	if !MainNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestGenesisBlock: Genesis block hash does not "+
			"appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(MainNetParams.GenesisHash))
	}
}

//testregtgenesisblock测试回归测试的起源块
//通过检查编码的字节和散列来确定网络的有效性。
func TestRegTestGenesisBlock(t *testing.T) {
//将Genesis块编码为原始字节。
	var buf bytes.Buffer
	err := RegressionNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestRegTestGenesisBlock: %v", err)
	}

//确保编码的块与预期的字节匹配。
	if !bytes.Equal(buf.Bytes(), regTestGenesisBlockBytes) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(regTestGenesisBlockBytes))
	}

//根据预期哈希检查块的哈希。
	hash := RegressionNetParams.GenesisBlock.BlockHash()
	if !RegressionNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestRegTestGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(RegressionNetParams.GenesisHash))
	}
}

//TestTestNet3GenesisBlock测试测试网络的Genesis块（版本
//3）通过检查编码的字节和散列来确认有效性。
func TestTestNet3GenesisBlock(t *testing.T) {
//将Genesis块编码为原始字节。
	var buf bytes.Buffer
	err := TestNet3Params.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestTestNet3GenesisBlock: %v", err)
	}

//确保编码的块与预期的字节匹配。
	if !bytes.Equal(buf.Bytes(), testNet3GenesisBlockBytes) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(testNet3GenesisBlockBytes))
	}

//根据预期哈希检查块的哈希。
	hash := TestNet3Params.GenesisBlock.BlockHash()
	if !TestNet3Params.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestTestNet3GenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(TestNet3Params.GenesisHash))
	}
}

//testsimnetgenesblock测试模拟测试网络的genesis块
//通过检查编码的字节和散列来确认有效性。
func TestSimNetGenesisBlock(t *testing.T) {
//将Genesis块编码为原始字节。
	var buf bytes.Buffer
	err := SimNetParams.GenesisBlock.Serialize(&buf)
	if err != nil {
		t.Fatalf("TestSimNetGenesisBlock: %v", err)
	}

//确保编码的块与预期的字节匹配。
	if !bytes.Equal(buf.Bytes(), simNetGenesisBlockBytes) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block does not "+
			"appear valid - got %v, want %v",
			spew.Sdump(buf.Bytes()),
			spew.Sdump(simNetGenesisBlockBytes))
	}

//根据预期哈希检查块的哈希。
	hash := SimNetParams.GenesisBlock.BlockHash()
	if !SimNetParams.GenesisHash.IsEqual(&hash) {
		t.Fatalf("TestSimNetGenesisBlock: Genesis block hash does "+
			"not appear valid - got %v, want %v", spew.Sdump(hash),
			spew.Sdump(SimNetParams.GenesisHash))
	}
}

//genesisBlockBytes是用于
//从协议版本60002开始的主网络。
var genesisBlockBytes = []byte{
 /*1，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x3b，0xa3，0xed，0xfd，/*….；…*/
 0X7A，0X7B，0X12，0XB2，0X7A，0XC7，0X2C，0X3E，/*Z..Z.，>*/

 /*7，0X76，0X8F，0X61，0X7F，0XC8，0X1B，0XC3，/*GV.A….*/
 0x88，0x8A，0x51，0x32，0x3A，0x9F，0xB8，0xAA，/*…Q2:*/

 /*B，0X1E，0X5E，0X4A，0X29，0XAB，0X5F，0X49，/*K.^J）.u i*/
 0XFF，0XFF，0X0，0X1D，0X1D，0XAC，0X2B，0X7C，/*……+*/

 /*1，0x01，0x00，0x00，0x00，0x01，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0xFF，0xFF，/*………*/
 0xFF，0xFD，0x4D，0x04，0xFF，0xFF，0x00，0x1d，/*..…*/

 /*1，0x04，0x45，0x54，0x68，0x65，0x20，0x54，/*等
 0x69、0x6D、0x65、0x73、0x20、0x30、0x33、0x2F、/*时间03/*/

 /*A，0x61，0x6E，0x2F，0x32，0x30，0x30，0x39，/*2009年1月*/
 0×20、0×43、0×68、0×61、0×6e、0×63、0×65、0×6c、/*通道*/

 /*C，0x6F，0x72，0x20，0x6F，0x6E，0x20，0x62，/*或B上的颜色
 0x72、0x69、0x6e、0x6b、0x20、0x6f、0x66、0x20、/**/

 /*3，0x65，0x63，0x6F，0x6E，0x64，0x20，0x62，/*秒b/
 0X61、0X69、0X6C、0X6F、0X75、0X74、0X20、0X66、/*失效F*/

 /*F、0x72、0x20、0x62、0x61、0x6E、0x6B、0x73、/*或银行*/
 0xFF，0xFF，0xFF，0xFF，0x01，0x00，0xF2，0x05，/*……*/

 /*a，0x01，0x00，0x00，0x00，0x43，0x41，0x04，/**…ca.*/
 0x67、0x8a、0xfd、0xb0、0xFe、0x55、0x48、0x27、/*g……*/

 /*9，0X67，0XF1，0XA6，0X71，0X30，0XB7，0X10，/*.G..Q0..*/
 0x5C，0xD6，0xA8，0x28，0xE0，0x39，0x09，0xA6，/*..（.9….*/

 /*9，0X62，0XE0，0XEA，0X1F，0X61，0XDE，0XB6，/*YB…A.*/
 0x49，0xF6，0xBC，0x3F，0x4C，0xEF，0x38，0xC4，/*I.？L.8.*/

 /*3，0x55，0x04，0XE5，0X1E，0XC1，0X12，0XDE，/*.U……*/
 0x5C、0x38、0x4D、0xF7、0xBA、0x0B、0x8D、0x57、/*\8M….W_*/

 /*A，0X4C，0X70，0X2B，0X6B，0XF1，0X1D，0X5F，/*.LP+K.*/
 0xAC，0x00，0x00，0x00，0x00，/*…….*/

}

//regtestgenesiblockbytes是的genesis块的线编码字节。
//从协议版本60002开始的回归测试网络。
var regTestGenesisBlockBytes = []byte{
 /*1，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x3b，0xa3，0xed，0xfd，/*….；…*/
 0X7A，0X7B，0X12，0XB2，0X7A，0XC7，0X2C，0X3E，/*Z..Z.，>*/

 /*7，0X76，0X8F，0X61，0X7F，0XC8，0X1B，0XC3，/*GV.A….*/
 0x88，0x8A，0x51，0x32，0x3A，0x9F，0xB8，0xAA，/*…Q2:*/

 /*B，0X1E，0X5E，0X4A，0XDA，0XE5，0X49，0X4D，/*K.^J）.u i*/
 0xFF，0xFF，0x7F，0x20，0x02，0x00，0x00，0x00，/*……+*/

 /*1，0x01，0x00，0x00，0x00，0x01，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0xFF，0xFF，/*………*/
 0xFF，0xFD，0x4D，0x04，0xFF，0xFF，0x00，0x1d，/*..…*/

 /*1，0x04，0x45，0x54，0x68，0x65，0x20，0x54，/*等
 0x69、0x6D、0x65、0x73、0x20、0x30、0x33、0x2F、/*时间03/*/

 /*A，0x61，0x6E，0x2F，0x32，0x30，0x30，0x39，/*2009年1月*/
 0×20、0×43、0×68、0×61、0×6e、0×63、0×65、0×6c、/*通道*/

 /*C，0x6F，0x72，0x20，0x6F，0x6E，0x20，0x62，/*或B上的颜色
 0x72、0x69、0x6e、0x6b、0x20、0x6f、0x66、0x20、/**/

 /*3，0x65，0x63，0x6F，0x6E，0x64，0x20，0x62，/*秒b/
 0X61、0X69、0X6C、0X6F、0X75、0X74、0X20、0X66、/*失效F*/

 /*F、0x72、0x20、0x62、0x61、0x6E、0x6B、0x73、/*或银行*/
 0xFF，0xFF，0xFF，0xFF，0x01，0x00，0xF2，0x05，/*……*/

 /*a，0x01，0x00，0x00，0x00，0x43，0x41，0x04，/**…ca.*/
 0x67、0x8a、0xfd、0xb0、0xFe、0x55、0x48、0x27、/*g……*/

 /*9，0X67，0XF1，0XA6，0X71，0X30，0XB7，0X10，/*.G..Q0..*/
 0x5C，0xD6，0xA8，0x28，0xE0，0x39，0x09，0xA6，/*..（.9….*/

 /*9，0X62，0XE0，0XEA，0X1F，0X61，0XDE，0XB6，/*YB…A.*/
 0x49，0xF6，0xBC，0x3F，0x4C，0xEF，0x38，0xC4，/*I.？L.8.*/

 /*3，0x55，0x04，0XE5，0X1E，0XC1，0X12，0XDE，/*.U……*/
 0x5C、0x38、0x4D、0xF7、0xBA、0x0B、0x8D、0x57、/*\8M….W_*/

 /*A，0X4C，0X70，0X2B，0X6B，0XF1，0X1D，0X5F，/*.LP+K.*/
 0xAC，0x00，0x00，0x00，0x00，/*…….*/

}

//testnet3genesisblockbytes是用于
//从协议版本60002开始的测试网络（版本3）。
var testNet3GenesisBlockBytes = []byte{
 /*1，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x3b，0xa3，0xed，0xfd，/*….；…*/
 0X7A，0X7B，0X12，0XB2，0X7A，0XC7，0X2C，0X3E，/*Z..Z.，>*/

 /*7，0X76，0X8F，0X61，0X7F，0XC8，0X1B，0XC3，/*GV.A….*/
 0x88，0x8A，0x51，0x32，0x3A，0x9F，0xB8，0xAA，/*…Q2:*/

 /*B，0X1E，0X5E，0X4A，0XDA，0XE5，0X49，0X4D，/*K.^J）.u i*/
 0XFF，0XFF，0X0，0X1D，0X1A，0XA4，0XAE，0X18，/*……+*/

 /*1，0x01，0x00，0x00，0x00，0x01，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0xFF，0xFF，/*………*/
 0xFF，0xFD，0x4D，0x04，0xFF，0xFF，0x00，0x1d，/*..…*/

 /*1，0x04，0x45，0x54，0x68，0x65，0x20，0x54，/*等
 0x69、0x6D、0x65、0x73、0x20、0x30、0x33、0x2F、/*时间03/*/

 /*A，0x61，0x6E，0x2F，0x32，0x30，0x30，0x39，/*2009年1月*/
 0×20、0×43、0×68、0×61、0×6e、0×63、0×65、0×6c、/*通道*/

 /*C，0x6F，0x72，0x20，0x6F，0x6E，0x20，0x62，/*或B上的颜色
 0x72、0x69、0x6e、0x6b、0x20、0x6f、0x66、0x20、/**/

 /*3，0x65，0x63，0x6F，0x6E，0x64，0x20，0x62，/*秒b/
 0X61、0X69、0X6C、0X6F、0X75、0X74、0X20、0X66、/*失效F*/

 /*F、0x72、0x20、0x62、0x61、0x6E、0x6B、0x73、/*或银行*/
 0xFF，0xFF，0xFF，0xFF，0x01，0x00，0xF2，0x05，/*……*/

 /*a，0x01，0x00，0x00，0x00，0x43，0x41，0x04，/**…ca.*/
 0x67、0x8a、0xfd、0xb0、0xFe、0x55、0x48、0x27、/*g……*/

 /*9，0X67，0XF1，0XA6，0X71，0X30，0XB7，0X10，/*.G..Q0..*/
 0x5C，0xD6，0xA8，0x28，0xE0，0x39，0x09，0xA6，/*..（.9….*/

 /*9，0X62，0XE0，0XEA，0X1F，0X61，0XDE，0XB6，/*YB…A.*/
 0x49，0xF6，0xBC，0x3F，0x4C，0xEF，0x38，0xC4，/*I.？L.8.*/

 /*3，0x55，0x04，0XE5，0X1E，0XC1，0X12，0XDE，/*.U……*/
 0x5C、0x38、0x4D、0xF7、0xBA、0x0B、0x8D、0x57、/*\8M….W_*/

 /*A，0X4C，0X70，0X2B，0X6B，0XF1，0X1D，0X5F，/*.LP+K.*/
 0xAC，0x00，0x00，0x00，0x00，/*…….*/

}

//simNetGenesBlockBytes是用于
//从协议版本70002开始的模拟测试网络。
var simNetGenesisBlockBytes = []byte{
 /*1，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x3b，0xa3，0xed，0xfd，/*….；…*/
 0X7A，0X7B，0X12，0XB2，0X7A，0XC7，0X2C，0X3E，/*Z..Z.，>*/

 /*7，0X76，0X8F，0X61，0X7F，0XC8，0X1B，0XC3，/*GV.A….*/
 0x88，0x8A，0x51，0x32，0x3A，0x9F，0xB8，0xAA，/*…Q2:*/

 /*B，0X1E，0X5E，0X4A，0X45，0X6，0X86，0X53，/*K.^J）。uI*/
 0xFF，0xFF，0x7F，0x20，0x02，0x00，0x00，0x00，/*……+*/

 /*1，0x01，0x00，0x00，0x00，0x01，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0x00，0x00，/*………*/
 0、0、0、0、0、0、0、0、0、0、0、0、0、/*…………*/

 /*0，0x00，0x00，0x00，0x00，0x00，0xFF，0xFF，/*………*/
 0xFF，0xFD，0x4D，0x04，0xFF，0xFF，0x00，0x1d，/*..…*/

 /*1，0x04，0x45，0x54，0x68，0x65，0x20，0x54，/*等
 0x69、0x6D、0x65、0x73、0x20、0x30、0x33、0x2F、/*时间03/*/

 /*A，0x61，0x6E，0x2F，0x32，0x30，0x30，0x39，/*2009年1月*/
 0×20、0×43、0×68、0×61、0×6e、0×63、0×65、0×6c、/*通道*/

 /*C，0x6F，0x72，0x20，0x6F，0x6E，0x20，0x62，/*或B上的颜色
 0x72、0x69、0x6e、0x6b、0x20、0x6f、0x66、0x20、/**/

 /*3，0x65，0x63，0x6F，0x6E，0x64，0x20，0x62，/*秒b/
 0X61、0X69、0X6C、0X6F、0X75、0X74、0X20、0X66、/*失效F*/

 /*F、0x72、0x20、0x62、0x61、0x6E、0x6B、0x73、/*或银行*/
 0xFF，0xFF，0xFF，0xFF，0x01，0x00，0xF2，0x05，/*……*/

 /*a，0x01，0x00，0x00，0x00，0x43，0x41，0x04，/**…ca.*/
 0x67、0x8a、0xfd、0xb0、0xFe、0x55、0x48、0x27、/*g……*/

 /*9，0X67，0XF1，0XA6，0X71，0X30，0XB7，0X10，/*.G..Q0..*/
 0x5C，0xD6，0xA8，0x28，0xE0，0x39，0x09，0xA6，/*..（.9….*/

 /*9，0X62，0XE0，0XEA，0X1F，0X61，0XDE，0XB6，/*YB…A.*/
 0x49，0xF6，0xBC，0x3F，0x4C，0xEF，0x38，0xC4，/*I.？L.8.*/

 /*3，0x55，0x04，0XE5，0X1E，0XC1，0X12，0XDE，/*.U……*/
 0x5C、0x38、0x4D、0xF7、0xBA、0x0B、0x8D、0x57、/*\8M….W_*/

 /*A，0X4C，0X70，0X2B，0X6B，0XF1，0X1D，0X5F，/*.LP+K.*/
 0xAC，0x00，0x00，0x00，0x00，/*…….*/

}

